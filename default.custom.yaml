# Rime default settings
# encoding: utf-8



# 虽然是补丁，但几乎把default.yaml的内容都覆盖了
patch:


  # 输入方案列表，默认五笔
  schema_list:
    - schema: wubi98                    # 五笔
    - schema: numbers                   # 大写数字
    - schema: pinyin_simp               # 普通拼音


  # 输入方案切换
  switcher:
    caption: "【输入方案切换】"
    hotkeys:                         # 弹出菜单的快捷键
      - "Control+0"
      - "Shift+Control+0"
    save_options:                    # 重新部署时，保留原值，NOTE有些设置似乎不起作用
      # - ascii_mode
      # - zh_trad                    
      - full_shape
      - extended_charset
      - ascii_punct
      - emoji
    fold_options: false              # 菜单弹出时，选项是否折叠
    abbreviate_options: true         # 折叠时是否缩写选项
    option_list_separator: " / "     # 折叠时的选项分隔符


  menu:
    page_size: 10                    # 候选词数量，最多支持 10 个
    # alternative_select_labels: [ ①, ②, ③, ④, ⑤, ⑥, ⑦, ⑧, ⑨, ⑩ ]  # 修改候选项标签
    # alternative_select_keys: ASDFGHJKL  # 对于五笔输入法，这个设置完全无意义


  # 中英文切换自定义
  # --------------------------------------------------------------------------------
  # good_old_caps_lock:  true 切换大写，false 切换中英
  # inline_ascii         切换到临时英文模式，按回车上屏后回到中文状态
  # commit_text          上屏拼出的词句，然后切换到英文
  # commit_code          上屏原始的编码，然后切换到英文
  # clear                清除未上屏内容，然后切换到英文
  # noop                 屏蔽快捷键，不切换中英，但不能用于Caps_Lock
  ascii_composer:
    good_old_caps_lock: true        # true | false
    switch_key:
      Caps_Lock: commit_code        # commit_code | commit_text | clear
      Shift_L: commit_code          # commit_code | commit_text | inline_ascii | clear | noop
      Shift_R: commit_code          # commit_code | commit_text | inline_ascii | clear | noop
      Control_L: noop               # commit_code | commit_text | inline_ascii | clear | noop
      Control_R: noop               # commit_code | commit_text | inline_ascii | clear | noop



  ####################################################################################################

  # 下面的 punctuator recognizer key_binder 写了一些所有方案通用的配置项。
  # 写在 default.yaml 里，方便多个方案引用，就是不用每个方案都写一遍了。


  # 标点符号
  # 设置为一个映射，就自动上屏；设置为多个映射，如 '/' : [ '/', ÷ ] 则进行复选。
  #   full_shape: 全角没改，使用预设值
  #   half_shape: 标点符号全部直接上屏，和 macOS 自带输入法的区别是
  #              '|' 是半角的，
  #              '~' 是半角的，
  #              '`'（反引号）没有改成 '·'（间隔号）。
  punctuator:
    # digit_separators: ",.:"  # 在此处指定的字符，在数字后被输入，若再次输入数字，则连同数字直接上屏；若双击，则恢复映射。 # librime >= 28a234f
    full_shape:
      ' ' : { commit: '　' }   # commit 的意思是这个符号输入时，会将当前处于第一位的候选词上屏
      ',' : { commit: ， }
      '.' : { commit: 。 }
      '<' : [ 《, 〈, «, ‹ ]
      '>' : [ 》, 〉, », › ]
      '/' : [ ／, ÷ ]
      '?' : { commit: ？ }
      ';' : { commit: ； }
      ':' : { commit: ： }
      '''' : { pair: [ '‘', '’' ] }
      '"' : { pair: [ '“', '”' ] }
      '\' : [ 、, ＼ ]
      '|' : [ ·, ｜, '§', '¦' ]
      '`' : ｀
      '~' : ～
      '!' : { commit: ！ }
      '@' : [ ＠, ☯ ]
      '#' : [ ＃, ⌘ ]
      '%' : [ ％, '°', '℃' ]
      '$' : [ ￥, '$', '€', '£', '¥', '¢', '¤' ]
      '^' : { commit: …… }
      '&' : ＆
      '*' : [ ＊, ·, ・, ×, ※, ❂ ]
      '(' : （
      ')' : ）
      '-' : －
      '_' : ——
      '+' : ＋
      '=' : ＝
      '[' : [ 「, 【, 〔, ［ ]
      ']' : [ 」, 】, 〕, ］ ]
      '{' : [ 『, 〖, ｛ ]
      '}' : [ 』, 〗, ｝ ]
    half_shape:
      ',' : '，'
      '.' : '。'
      '<' : '《'
      '>' : '》'
      '/' : '/'
      '?' : '？'
      ';' : '；'
      ':' : '：'
      '''' : { pair: [ '‘', '’' ] }
      '"' : { pair: [ '“', '”' ] }
      '\' : '、'
      '|' : '|'
      '`' : '`'
      '~' : '~'
      '!' : '！'
      '@' : '@'
      '#' : '#'
      '%' : '%'
      '$' : '¥'
      '^' : '……'
      '&' : '&'
      '*' : '*'
      '(' : '（'
      ')' : '）'
      '-' : '-'
      '_' : ——
      '+' : '+'
      '=' : '='
      '[' : '【'
      ']' : '】'
      '{' : '「'
      '}' : '」'



  # 处理符合特定规则的输入码，如网址、反查
  # 此处配置较为通用的选项，各方案中另增加了和方案功能绑定的 patterns。
  recognizer:
    patterns:  # 一些常见的英文组合，当正则匹配到这些时，都不会生成候选词，而只输入英文
      email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"                            # email @ 之后不上屏
      uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
      url: "^(www[.]|https?:|ftp[.:]|mailto:|file:|localhost).*$|^[a-z]+[.].+$"
      underscore: "^[A-Za-z]+_.*"  # 下划线不上屏
      url_2: "^[A-Za-z]+[.].*"   # 句号不上屏，支持 google.com abc.txt 等网址或文件名，使用句号翻页时需要注释掉
      colon: "^[A-Za-z]+:.*"     # 冒号不上屏



  # 快捷键
  key_binder:
    bindings:
      # - { when: has_menu, accept: comma, send: 2 }      # 候选2 用逗号选择 （修改的时候不要多加或少加空格，跟前面的对齐就好了）
      # - { when: has_menu, accept: period, send: 3 }     # 候选3 用句号选择
      - { when: has_menu, accept: semicolon, send: 2 }  # 候选2 用分号
      - { when: has_menu, accept: apostrophe, send: 3 } # 候选3 用单引号

      # 上下翻页 [ ]
      - { when: has_menu, accept: bracketleft, send: Page_Up }
      - { when: has_menu, accept: bracketright, send: Page_Down }

      # 上下翻页 - =
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }
      
      # 上下翻页 tab
      - { when: has_menu, accept: Shift+Tab, send: Page_Up }
      - { when: has_menu, accept: Tab, send: Page_Down }

      # 回车清码
      # - { when: composing, accept: Return, send: Escape }

      # emacs key bindings, copy from https://github.com/rime/rime-prelude/blob/master/key_bindings.yaml
      - { when: composing, accept: Control+p, send: Up }
      - { when: composing, accept: Control+n, send: Down }
      - { when: composing, accept: Control+b, send: Left }
      - { when: composing, accept: Control+f, send: Right }
      - { when: composing, accept: Control+a, send: Home }
      - { when: composing, accept: Control+e, send: End }
      - { when: composing, accept: Control+d, send: Delete }
      - { when: composing, accept: Control+k, send: Shift+Delete }
      - { when: composing, accept: Control+h, send: BackSpace }
      - { when: composing, accept: Control+g, send: Escape }
      - { when: composing, accept: Control+bracketleft, send: Escape }
      - { when: composing, accept: Alt+v, send: Page_Up }
      - { when: composing, accept: Control+v, send: Page_Down }



# 按键速查
# https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md
# （没有 Command 键，不支持）
# accept 和 send 可用字段除 A-Za-z0-9 外，还包含以下键盘上实际有的键：
# （区分大小写）
# BackSpace 退格
# Tab 水平定位符
# Linefeed 换行
# Clear 清除
# Return 回车
# Pause 暂停
# Sys_Req 印屏
# Escape 退出
# Delete 删除
# Home 原位
# Left 左箭头
# Up 上箭头
# Right 右箭头
# Down 下箭头
# Prior、Page_Up 上翻
# Next、Page_Down 下翻
# End 末位
# Begin 始位
# Shift_L 左Shift
# Shift_R 右Shift
# Control_L 左Ctrl
# Control_R 右Ctrl
# Meta_L 左Meta
# Meta_R 右Meta
# Alt_L 左Alt
# Alt_R 右Alt
# Super_L 左Super
# Super_R 右Super
# Hyper_L 左Hyper
# Hyper_R 右Hyper
# Caps_Lock 大写锁
# Shift_Lock 上档锁
# Scroll_Lock 滚动锁
# Num_Lock 小键板锁
# Select 选定
# Print 打印
# Execute 运行
# Insert 插入
# Undo 还原
# Redo 重做
# Menu 菜单
# Find 搜寻
# Cancel 取消
# Help 帮助
# Break 中断
# space 空格
# exclam !
# quotedbl "
# numbersign #
# dollar $
# percent %
# ampersand &
# apostrophe '
# parenleft (
# parenright )
# asterisk *
# plus +
# comma ,
# minus -
# period .
# slash /
# colon :
# semicolon ;
# less <
# equal =
# greater >
# question ?
# at @
# bracketleft [
# backslash \
# bracketright ]
# asciicircum ^
# underscore _
# grave `
# braceleft {
# bar |
# braceright }
# asciitilde ~
# KP_Space 小键板空格
# KP_Tab 小键板水平定位符
# KP_Enter 小键板回车
# KP_Delete 小键板删除
# KP_Home 小键板原位
# KP_Left 小键板左箭头
# KP_Up 小键板上箭头
# KP_Right 小键板右箭头
# KP_Down 小键板下箭头
# KP_Prior、KP_Page_Up 小键板上翻
# KP_Next、KP_Page_Down 小键板下翻
# KP_End 小键板末位
# KP_Begin 小键板始位
# KP_Insert 小键板插入
# KP_Equal 小键板等于
# KP_Multiply 小键板乘号
# KP_Add 小键板加号
# KP_Subtract 小键板减号
# KP_Divide 小键板除号
# KP_Decimal 小键板小数点
# KP_0 小键板0
# KP_1 小键板1
# KP_2 小键板2
# KP_3 小键板3
# KP_4 小键板4
# KP_5 小键板5
# KP_6 小键板6
# KP_7 小键板7
# KP_8 小键板8
# KP_9 小键板9