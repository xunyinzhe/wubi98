# Rime schema settings
# Encoding: utf-8


schema:
  schema_id: wubi98
  name: "五笔"
  version: "1.0"
  author:
    - 王永民
  description: |
    五笔98版
  dependencies:
    - pinyin_simp

switches:
  - name: ascii_mode                          # 中文/英文切换，0 中文，1 英文
    reset: 0
    states: [ 中文, 英文 ]
  - name: zh_trad                             # 简体繁体切换，0 简体，1 繁体。zh_trad是自定义的，tradition - option_name
    reset: 0
    states: [ 汉字, 漢字 ]
  - name: full_shape                          # 全角符号/半角符号切换，0 半角，1 全角
    states: [ 半角, 全角 ]
  - name: extended_charset                    # 字符集切换，0 CJK基本字符集，1 CJK全字符集
    states: [ 常用, 扩展 ]
  - name: ascii_punct                         # 中文/英文标点符号切换，0 中文符号，1英文符号
    states: [ 。，, ．， ]
  - name: emoji                               # 表情符号。emoji是自定义的，对应emoji - option_name
    reset: 0
    states: [ "樱桃", "🍒" ]


engine:
  processors:                                      ## 处理各类按键消息
    - ascii_composer                                  # 处理中英文切换
    - recognizer                                      # 与matcher配合使用，处理符合特定规则的输入码，如网址、反查等tags
    - key_binder                                      # 在特定条件下，按键绑定定义，如重定义逗号、句号为候选翻页、开关快捷键等
    - speller                                         # 拼写处理器，接受字符输入
    - punctuator                                      # 标点符号处理器，将单个按键直接映射为标点符号或文字
    - selector                                        # 选字处理器，处理数字选字键、上下候选定位、换页键
    - navigator                                       # 处理输入栏内的光标移动键
    - express_editor                                  # 编辑器，处理空格、回车上屏、删除键
    # - fluid_editor                                  # 句子输入编辑器，用于以空格断词、回车上屏的【注音】、【语句流】等输入方案，替换 express_editor
    # - chord_composer                                # 和弦作曲家或曰并击处理器，用于【宫保拼音】等多键并击的输入方案
    # - lua_processor@lua_fun                         # lua自定义按键处理，可以有多个
  segmentors:                                      ## 识别匹配不同类型的内容，将输入码分段并标记tag
    - ascii_segmentor                                 # 标识英文段落
    - matcher                                         # 配合recognizer标识符合特定规则的段落，如网址、反查等，加上特定tag
    - abc_segmentor                                   # 标识常规的文字段落，加上abc这个tag
    - affix_segmentor@stroke_lookup                   # 笔画反查tag
    - affix_segmentor@pinyin_lookup                   # 拼音反查tag
    - punct_segmentor                                 # 标识句子输入（键入标点符号用）加上punct这个tag
    - fallback_segmentor                              # 标识其他未标识段落
    # - lua_segmentor@lua_function                    # 使用lua自定义分割，后接@+lua函数名
  translators:                                     ## 识别指定类型的编码并转换为对应候选文字
    # - echo_translator                               # 没有其他候选字时，回显输入码（输入码可以Shift+Enter上屏）
    - punct_translator                                # 配合 punct_segmentor 转换标点符号
    - table_translator                                # 码表翻译器，用于五笔翻译，就是把五笔编码翻译成汉字
    # - script_translator                             # 脚本翻译器，用于拼音等基于音节表的输入方案
    # - reverse_lookup_translator                     # 反查翻译器，用另一种编码方案查码
    - reverse_lookup_translator@stroke_lookup         # 笔画反查
    - reverse_lookup_translator@pinyin_lookup         # 拼音反查
    - lua_translator@*date_translator                 # 日期、时间、星期
    - history_translator@repeat_last_input            # 重复上一次输入，对应下面的 repeat_last_input
  filters:                                         ## 过滤翻译的结果
    - simplifier@emoji            
    - simplifier@tradition
    # - uniquifier                                           # 过滤重复的候选字，有可能来自 simplifier
    # - cjk_minifier                                         # 字符集过滤（用于 script_translator，使之支援 extended_charset 开关）
    # - reverse_lookup_filter                                # 反查滤镜，以更灵活的方式反查，Rime1.0后替代reverse_lookup_translator
    # - single_char_filter                                   # 单字过滤器，如加载此组件，则屏蔽词典中的词组（仅 table_translator 有效）
    # - lua_filter@*single_char_first_filter   # 单字优先
    # - lua_filter@*single_char_only           # 纯单字





# Speller 设置，对于五笔输入法，大部分设置都没有用
################################################################################
speller:
  # alphabet:                                # 定义本方案输入键
  # initials:                                # 定义仅作始码之键
  # finals:                                  # 定义仅作末码之键
  # delimiter:                               # 上屏时的音节间分音符
  # algebra:                                 # 拼写运算规则，由之算出的拼写汇入 prism 中
  max_code_length: 4                         # 形码最大码长，超过则顶字上屏，四码上屏
  auto_select: true                          # 四码唯一时，自动上屏
  # auto_select_pattern: ''                  # 自动上屏规则，以正则表达式描述，当输入串可以被匹配时自动顶字上屏。
  # auto_clear: max_length                   # 空码时自动清空
  # use_space                                # 以空格作输入码（ true 或 false ）


# Translator 设置
################################################################################
translator:
  dictionary: &dict                     # 引用名称，还没用到
    wubi98                              # 翻译器将调取此字典文件
  enable_charset_filter: true           # 是否开启字符集过滤（仅table_translator有效。启用cjk_minifier后可适用于script_translator）
  enable_completion: true               # 提前显示编码未输入完整的词条（仅table_translator有效）

  enable_sentence: false                # 句子输入模式
  enable_user_dict: false               # 用户词典记录用户输入内容
  enable_encoder: false                 # 是否开启自动造词（仅table_translator有效）
  # max_phrase_length:                  # 自动生成词的最大长度（仅table_translator有效）
  encode_commit_history: false          # 是否对已上屏词自动成词（仅table_translator有效）
  # sentence_over_completion            # 在无全码对应字而仅有逐键提示时也开启智能组句（仅table_translator有效）
  
  # strict_spelling: 配合speller中的fuzz规则，仅以简拼码组词（仅table_translator有效）
  # disable_user_dict_for_patterns: 不需要录入用户词典的编码
  # prism: 设定由此主翻译器的speller生成的棱镜文件名，或此副编译器调用的棱镜名
  # user_dict: 设定用户词典名
  # db_class: 设定用户词典类型，可设tabledb（文本）或userdb（二进制）
  # spelling_hints: 设定多少字以内候选标注完整带调拼音（仅script_translator有效）
  # initial_quality: 设定此翻译器出字优先级
  # tag: 设定此翻译器针对的tag。可不填，不填则仅针对abc
  # prefix: 设定此翻译器的前缀标识，可不填，不填则无前缀
  # suffix: 设定此翻译器的尾缀标识，可不填，不填则无尾缀
  # tips: 设定此翻译器的输入前提示符，可不填，不填则无提示符
  # closing_tips: 设定此翻译器的结束输入提示符，可不填，不填则无提示符

  preedit_format:                       # 上屏码自定义
    # - xform/.+//                      # 删除上屏码
  # 对候选
  comment_format:                       # 提示码自定义
    # - xform/.+//                      # 删除所有提示码，提示吗就是码还没有输入完，候选字后面的码


####################################################################################################
# 简转繁和表情符号都是通过OpenCC实现的，在filters阶段把候选项追加进去，具体原理是什么我不想再深究，能用就行
####################################################################################################

# 简繁转换
# https://github.com/BYVoid/OpenCC
# tradition这个名称是在filters simplifier@后面指定的
tradition:
  option_name: zh_trad             # 对应 switches 中的 name
  opencc_config: s2t.json          # Rime 内置配置，在程序目录可找到
  tips: none                       # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  tags: [ abc ]                    # 限制在对应 tag，不对其他如反查的内容做简繁转换

# 表情符号
# emoji这个名称是在filters simplifier@后面指定的
emoji:
  option_name: emoji               # 对应 switches 中的 name，可以不是emoji，换成其它单词也行
  opencc_config: emoji.json        # 选择要加载的 OpenCC 配置
  tips: none
  inherit_comment: false           # 在lua脚本及反查中，emoji 的 comment 显示为空



####################################################################################################
# 反查
Comment: >
  用拼音或笔画反查五笔。
  
  第一种实现方法，也是大部分人都使用的一种方式：
    1. recognizer识别出反查，例如以z开头的输入码
    2. affix_segmentor把识别出的反查输入码打上标签tag
    3. reverse_lookup_translator进行反查，translator与segmentor名称一样时，可放在一起设置
  
  第二种实现方法，用reverse_lookup_filter，前两步都一样：
    3. 用script_translator替换reverse_lookup_translator，script_translator就是拼音翻译，和通常的拼音schema一样
    4. 最后用reverse_lookup_filter，根据汉字在五笔字典中找出五笔编码。
       如果有两种反查，例如pinyin和stroke，根据tags，可以把它们都汇集在这里统一反查。

  可惜，第二种方法没能成功，汉字是能打出来，就是不显示五笔码，可能是我的reverse_lookup_filter设置不对，
  librime也没有像样的官方文档，我也只能在网上找例子，然后照猫画虎。
  不纠结了，第二种配置也没什么明显的优势，就是逻辑稍清晰一点点。
  其实我在filter用一个lua脚本应该是可以实现的，只是这样就把简单的事情搞复杂了，远不如第一种方法简单。
####################################################################################################

# Segmentor 设置
# tag: 设定其tag
# prefix: 设定其前缀标识，可不填，不人则无前缀
# suffix: 设定其尾缀标识，可不填，不填则无尾缀
# tips: 设定其输入前提示符，可不填，不填则无提示符
# closing_tips: 设定其结束输入提示符，可不填，不填则无提示符
# extra_tags: 为此 segmentor 所标记的段落插上其它tag

# 当affix_segmentor与translator名称一样时，可在一起配置
# 笔画查询五笔
stroke_lookup:
  tag: stroke_lookup
  dictionary: stroke
  enable_completion: true
  prefix: "z`"
  suffix: "'"                   # '显示结果
  preedit_format:               # 上屏码自定义
    - xlit/hspnz/一丨丿丶乙/
  comment_format:             # 提示码自定义
    - xform/^(([a-y]+) )?([a-y]+)$/$3/    # 对于单字，可能会有多个编码，例如【工】字，简码a、全码aaaa，让它只显示最后一个编码(全码)
  tips: 〔笔画〕
  closing_tips: 〔五笔〕

# 拼音查询五笔
pinyin_lookup:
  tag: pinyin_lookup
  dictionary: pinyin_simp  # 反查使用的拼音词库
  prefix: "z"              # 反查前缀，以它为起点
  suffix: "'"              # 反查后缀，以它为结点
  tips: 〔拼音〕              # 反查时的提示信息
  closing_tips: 〔五笔〕
  preedit_format:           # 对上屏进行自定义
    - xform/([nl])v/$1ü/    # nv -> nü,  lv -> lü
    - xform/([nl])ue/$1üe/  # nue -> nüe, lue -> lüe
    - xform/([jqxy])v/$1u/  # jv -> ju, qv -> qu, xv -> xu, yv -> yu
  comment_format:           # 提示码自定义
    - xform/^(([a-y]+) )?([a-y]+)$/$3/    # 对于单字，可能会有多个编码，例如【工】字，简码a、全码aaaa，让它只显示最后一个编码(全码)



# 识别反查码，还有其它的一些模式
recognizer:
  import_preset: default
  patterns:
    punct: "^/([0-9]0?|[A-Za-z]+)$"              # 见: 程序文件夹/data/symbols.yaml
    pinyin_lookup: "^z[a-z]*'?$"                 # 反查词条的正则
    stroke_lookup: "^z`[hspnz]*'?$"


punctuator:
  # 1. default
  #  不使用快捷输入
  # 2. symbols
  #  快捷输入符号，例如: 符号/fh、数字/0、单位/dw 等等，这些符号见程序安装文件夹data/symbols.yaml，
  #  NOTE 使用时需要将 recognizer -> patterns 的 punct 字段的注释去掉，让recognizer能识别快捷符号输入
  import_preset: symbols  # default | symbols


# 引用default.yaml中的key_binder
key_binder:
  import_preset: default


# 重复上一次输入
repeat_last_input:
  input: z
  size: 1
  initial_quality: 1



# 编码运算
####################################################################################################
# xform   改写（不保留原形）
# derive  衍生（保留原形）
# abbrev  简拼（出字优先级较上两组更低），例如bj能匹配bijiao
# fuzz    简拼（此种简拼仅组词，不出单字）
# xlit    变换（适合大量一对一变换）
# erase   删除
####################################################################################################